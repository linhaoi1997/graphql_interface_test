{
  "uid" : "72b5e310fb5b1821",
  "name" : "test_1[variable0]",
  "fullName" : "interface.thingInspectionRule_test.test_updateThingInspectionRule.TestUpdateThingInspectionRule#test_1",
  "historyId" : "216926bc3a78abb8f856c2096f16ff25",
  "time" : {
    "start" : 1600228064883,
    "stop" : 1600228065146,
    "duration" : 263
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_updateThingInspectionRule.TestUpdateThingInspectionRule object at 0x10bcb0940>\nvariable = {'input': {'addition': '[{\"key\": \"b7f0c19b0fb14261b6c0a1803c0ae6e5\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_o7mc3\"}, {...L', 'id': 1, ...}, {'boundary': {...}, 'category': 'NORMAL', 'criteria': 'GT', 'id': 2, ...}]}], 'name': 'name_ultk8'}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\ncreate_id = <function create_id.<locals>._create_id at 0x10ba84d90>\n\n    @allure.story(\"所有项完整\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_all_params\", **BaseTestCase.all_param))\n    def test_1(self, variable, resource, create_id):\n        # 创建一个id以修改\n        _id, _id_map = create_id(self.create_name, 1, self.resource_name, return_type=\"result\")\n        variable['input'][\"id\"] = _id\n        for i in range(self.all_param.get(\"list_len\")):\n            variable['input']['items'][i][\"id\"] = _id_map['ThingInspectionItem'][i]\n        # 使用创建的id\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ninterface/thingInspectionRule_test/test_updateThingInspectionRule.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_updateThingInspectionRule.TestUpdateThingInspectionRule object at 0x10bcb0940>\nvalue = None\nresult = [{'extensions': {'code': 'USER_INPUT_ERROR'}, 'locations': [{'column': 5, 'line': 2}], 'message': \"id 为 ['1', '2'] 的子项目不存在\", 'path': ['updateThingInspectionRule']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_id",
    "time" : {
      "start" : 1600228064883,
      "stop" : 1600228064883,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1600227952116,
      "stop" : 1600227952218,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "resource",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_updateThingInspectionRule.TestUpdateThingInspectionRule object at 0x10bcb0940>\nvariable = {'input': {'addition': '[{\"key\": \"b7f0c19b0fb14261b6c0a1803c0ae6e5\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_o7mc3\"}, {...L', 'id': 1, ...}, {'boundary': {...}, 'category': 'NORMAL', 'criteria': 'GT', 'id': 2, ...}]}], 'name': 'name_ultk8'}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\ncreate_id = <function create_id.<locals>._create_id at 0x10ba84d90>\n\n    @allure.story(\"所有项完整\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_all_params\", **BaseTestCase.all_param))\n    def test_1(self, variable, resource, create_id):\n        # 创建一个id以修改\n        _id, _id_map = create_id(self.create_name, 1, self.resource_name, return_type=\"result\")\n        variable['input'][\"id\"] = _id\n        for i in range(self.all_param.get(\"list_len\")):\n            variable['input']['items'][i][\"id\"] = _id_map['ThingInspectionItem'][i]\n        # 使用创建的id\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ninterface/thingInspectionRule_test/test_updateThingInspectionRule.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_updateThingInspectionRule.TestUpdateThingInspectionRule object at 0x10bcb0940>\nvalue = None\nresult = [{'extensions': {'code': 'USER_INPUT_ERROR'}, 'locations': [{'column': 5, 'line': 2}], 'message': \"id 为 ['1', '2'] 的子项目不存在\", 'path': ['updateThingInspectionRule']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "45add82d08380b56",
      "name" : "log",
      "source" : "45add82d08380b56.txt",
      "type" : "text/plain",
      "size" : 13858
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "所有项完整"
  }, {
    "name" : "feature",
    "value" : "updateThingInspectionRule"
  }, {
    "name" : "epic",
    "value" : "thingInspectionRule"
  }, {
    "name" : "parentSuite",
    "value" : "interface.thingInspectionRule_test"
  }, {
    "name" : "suite",
    "value" : "test_updateThingInspectionRule"
  }, {
    "name" : "subSuite",
    "value" : "TestUpdateThingInspectionRule"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "99506-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.thingInspectionRule_test.test_updateThingInspectionRule"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "variable",
    "value" : "{'input': {'id': 1, 'name': 'name_ultk8', 'items': [{'id': 1, 'name': 'name_j42zs', 'subItems': [{'id': 1, 'name': 'name_s8o0n', 'standard': 'standard_fkfaw', 'category': 'NUMBER', 'criteria': 'GT_LOWER_LE_UPPER', 'boundary': {'a': 1, 'b': 1}}, {'id': 1, 'name': 'name_rpkeq', 'standard': 'standard_jlfsz', 'category': 'NUMBER', 'criteria': 'GE_LOWER_LE_UPPER', 'boundary': {'a': 1, 'b': 1}}, {'id': 2, 'name': 'name_4jszb', 'standard': 'standard_k53di', 'category': 'NUMBER', 'criteria': 'LE', 'boundary': {'a': 1, 'b': 1}}]}, {'id': 2, 'name': 'name_vnnra', 'subItems': [{'id': 2, 'name': 'name_zsxlt', 'standard': 'standard_y1l2m', 'category': 'NORMAL', 'criteria': 'LT', 'boundary': {'a': 1, 'b': 1}}, {'id': 3, 'name': 'name_wgfm4', 'standard': 'standard_4jhli', 'category': 'NORMAL', 'criteria': 'LT', 'boundary': {'a': 1, 'b': 1}}, {'id': 1, 'name': 'name_05uji', 'standard': 'standard_ft9th', 'category': 'NORMAL', 'criteria': 'GT_LOWER_LT_UPPER', 'boundary': {'a': 1, 'b': 1}}]}, {'id': 3, 'name': 'name_c4z5j', 'subItems': [{'id': 1, 'name': 'name_wodsn', 'standard': 'standard_qaz1q', 'category': 'NUMBER', 'criteria': 'GE_LOWER_LE_UPPER', 'boundary': {'a': 1, 'b': 1}}, {'id': 1, 'name': 'name_2p647', 'standard': 'standard_4umnu', 'category': 'NORMAL', 'criteria': 'NOTEQUAL', 'boundary': {'a': 1, 'b': 1}}, {'id': 2, 'name': 'name_mdvm2', 'standard': 'standard_i74ii', 'category': 'NORMAL', 'criteria': 'GT', 'boundary': {'a': 1, 'b': 1}}]}], 'addition': '[{\"key\": \"b7f0c19b0fb14261b6c0a1803c0ae6e5\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_o7mc3\"}, {\"key\": \"5dfbced16455411da0ca9ade7b880cbc\", \"value\": \"\\\\u591a\\\\u884c\\\\u6587\\\\u5b57_75iro\"}, {\"key\": \"ddf0a83e6ccb43ac8d330cac8107b5d6\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f_q7c20\"}, {\"key\": \"67b64d2a1458405db72f7ce06e2d5d1e\", \"value\": 1600227948613}, {\"key\": \"043500291f234334ab188cd51944b8bb\", \"value\": 1600227948613}, {\"key\": \"c05b004f2643415c98bfa57e485f7d91\", \"value\": 1600227948613}, {\"key\": \"ad69fcfb00004a62bbc9d52cf112baa8\", \"value\": \"\\\\u63cf\\\\u8ff0\\\\u6587\\\\u5b57_x8n3j\"}, {\"key\": \"f24c40305e4e43a8a439e01723ad3d65\", \"value\": \"1\"}, {\"key\": \"e21957db3dde408c84c90d4914a449c7\", \"value\": [\"1\", \"4\", \"2\"]}, {\"key\": \"329724f9a8e442e3b9b49c49e3525268\", \"value\": 1.01}, {\"key\": \"f37767f7c5f14f5a868863b65a1b7d0b\", \"value\": 1.01}, {\"key\": \"923492afa7f4464f99e4facc432bb744\", \"value\": 1.01}, {\"key\": \"c044a79a6577407eaa2d7342845737d2\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f-\\\\u6d4b\\\\u8bd5\\\\u5fc5\\\\u586b\\\\u9879/\\\\u9ed8\\\\u8ba4\\\\u5185\\\\u5bb9_gbt5m\"}, {\"key\": \"bef34a89163f4c10af4df2abd3cd4157\", \"value\": \"\\\\u6587\\\\u5b57-\\\\u9650\\\\u5b57\\\\u65702-100_66s0j\"}]'}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "72b5e310fb5b1821.json",
  "parameterValues" : [ "{'input': {'id': 1, 'name': 'name_ultk8', 'items': [{'id': 1, 'name': 'name_j42zs', 'subItems': [{'id': 1, 'name': 'name_s8o0n', 'standard': 'standard_fkfaw', 'category': 'NUMBER', 'criteria': 'GT_LOWER_LE_UPPER', 'boundary': {'a': 1, 'b': 1}}, {'id': 1, 'name': 'name_rpkeq', 'standard': 'standard_jlfsz', 'category': 'NUMBER', 'criteria': 'GE_LOWER_LE_UPPER', 'boundary': {'a': 1, 'b': 1}}, {'id': 2, 'name': 'name_4jszb', 'standard': 'standard_k53di', 'category': 'NUMBER', 'criteria': 'LE', 'boundary': {'a': 1, 'b': 1}}]}, {'id': 2, 'name': 'name_vnnra', 'subItems': [{'id': 2, 'name': 'name_zsxlt', 'standard': 'standard_y1l2m', 'category': 'NORMAL', 'criteria': 'LT', 'boundary': {'a': 1, 'b': 1}}, {'id': 3, 'name': 'name_wgfm4', 'standard': 'standard_4jhli', 'category': 'NORMAL', 'criteria': 'LT', 'boundary': {'a': 1, 'b': 1}}, {'id': 1, 'name': 'name_05uji', 'standard': 'standard_ft9th', 'category': 'NORMAL', 'criteria': 'GT_LOWER_LT_UPPER', 'boundary': {'a': 1, 'b': 1}}]}, {'id': 3, 'name': 'name_c4z5j', 'subItems': [{'id': 1, 'name': 'name_wodsn', 'standard': 'standard_qaz1q', 'category': 'NUMBER', 'criteria': 'GE_LOWER_LE_UPPER', 'boundary': {'a': 1, 'b': 1}}, {'id': 1, 'name': 'name_2p647', 'standard': 'standard_4umnu', 'category': 'NORMAL', 'criteria': 'NOTEQUAL', 'boundary': {'a': 1, 'b': 1}}, {'id': 2, 'name': 'name_mdvm2', 'standard': 'standard_i74ii', 'category': 'NORMAL', 'criteria': 'GT', 'boundary': {'a': 1, 'b': 1}}]}], 'addition': '[{\"key\": \"b7f0c19b0fb14261b6c0a1803c0ae6e5\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_o7mc3\"}, {\"key\": \"5dfbced16455411da0ca9ade7b880cbc\", \"value\": \"\\\\u591a\\\\u884c\\\\u6587\\\\u5b57_75iro\"}, {\"key\": \"ddf0a83e6ccb43ac8d330cac8107b5d6\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f_q7c20\"}, {\"key\": \"67b64d2a1458405db72f7ce06e2d5d1e\", \"value\": 1600227948613}, {\"key\": \"043500291f234334ab188cd51944b8bb\", \"value\": 1600227948613}, {\"key\": \"c05b004f2643415c98bfa57e485f7d91\", \"value\": 1600227948613}, {\"key\": \"ad69fcfb00004a62bbc9d52cf112baa8\", \"value\": \"\\\\u63cf\\\\u8ff0\\\\u6587\\\\u5b57_x8n3j\"}, {\"key\": \"f24c40305e4e43a8a439e01723ad3d65\", \"value\": \"1\"}, {\"key\": \"e21957db3dde408c84c90d4914a449c7\", \"value\": [\"1\", \"4\", \"2\"]}, {\"key\": \"329724f9a8e442e3b9b49c49e3525268\", \"value\": 1.01}, {\"key\": \"f37767f7c5f14f5a868863b65a1b7d0b\", \"value\": 1.01}, {\"key\": \"923492afa7f4464f99e4facc432bb744\", \"value\": 1.01}, {\"key\": \"c044a79a6577407eaa2d7342845737d2\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f-\\\\u6d4b\\\\u8bd5\\\\u5fc5\\\\u586b\\\\u9879/\\\\u9ed8\\\\u8ba4\\\\u5185\\\\u5bb9_gbt5m\"}, {\"key\": \"bef34a89163f4c10af4df2abd3cd4157\", \"value\": \"\\\\u6587\\\\u5b57-\\\\u9650\\\\u5b57\\\\u65702-100_66s0j\"}]'}}" ]
}