{
  "uid" : "838fc390b9baf49f",
  "name" : "test_1[variable0]",
  "fullName" : "interface.sparePartOutBound_test.test_createSparePartOutbound.TestCreateSparePartOutbound#test_1",
  "historyId" : "018e8ffed1b9b57d917e4fd82d2c8947",
  "time" : {
    "start" : 1600337909110,
    "stop" : 1600337909312,
    "duration" : 202
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_createSparePartOutbound.TestCreateSparePartOutbound object at 0x10abf6be0>\nvariable = {'input': {'addition': '[{\"key\": \"10f16f763c9548aea404526b525be2cb\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_hajng\"}, {...}, {'number': 1, 'reason': 'LOOSEN', 'sparePart': {'id': 1}}], 'factory': 'factory_usnsl', 'operator': {'id': 1}, ...}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109b68400>\n\n    @allure.story(\"所有项完整\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_all_params\", **BaseTestCase.all_param))\n    def test_1(self, variable, resource):\n        # 有bug先改下参数\n        for i in variable[\"input\"][\"details\"]:\n            i[\"reason\"] = \"LOOSEN\"\n        variable[\"input\"].pop(\"thingMaintenance\")\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ntest_createSparePartOutbound.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../support/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\n../../support/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_createSparePartOutbound.TestCreateSparePartOutbound object at 0x10abf6be0>\nvalue = None\nresult = [{'locations': [{'column': 5, 'line': 2}], 'message': \"1 validation error for CreateSparePartOutboundInput\\nreason\\n  ...MENT_REPAIR: '设备维修'>, <SparePartOutboundReason.EQUIPMENT_MAINTENANCE: '设备保养'>])\", 'path': ['createSparePartOutbound']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1600337909109,
      "stop" : 1600337909109,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1600337909053,
      "stop" : 1600337909108,
      "duration" : 55
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "resource",
    "time" : {
      "start" : 1600337909109,
      "stop" : 1600337909109,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_createSparePartOutbound.TestCreateSparePartOutbound object at 0x10abf6be0>\nvariable = {'input': {'addition': '[{\"key\": \"10f16f763c9548aea404526b525be2cb\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_hajng\"}, {...}, {'number': 1, 'reason': 'LOOSEN', 'sparePart': {'id': 1}}], 'factory': 'factory_usnsl', 'operator': {'id': 1}, ...}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109b68400>\n\n    @allure.story(\"所有项完整\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_all_params\", **BaseTestCase.all_param))\n    def test_1(self, variable, resource):\n        # 有bug先改下参数\n        for i in variable[\"input\"][\"details\"]:\n            i[\"reason\"] = \"LOOSEN\"\n        variable[\"input\"].pop(\"thingMaintenance\")\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ntest_createSparePartOutbound.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../support/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\n../../support/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_createSparePartOutbound.TestCreateSparePartOutbound object at 0x10abf6be0>\nvalue = None\nresult = [{'locations': [{'column': 5, 'line': 2}], 'message': \"1 validation error for CreateSparePartOutboundInput\\nreason\\n  ...MENT_REPAIR: '设备维修'>, <SparePartOutboundReason.EQUIPMENT_MAINTENANCE: '设备保养'>])\", 'path': ['createSparePartOutbound']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b7e9e3d116ff0cb",
      "name" : "log",
      "source" : "b7e9e3d116ff0cb.txt",
      "type" : "text/plain",
      "size" : 2386
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "createSparePartOutbound"
  }, {
    "name" : "story",
    "value" : "所有项完整"
  }, {
    "name" : "epic",
    "value" : "sparePartOutBound"
  }, {
    "name" : "parentSuite",
    "value" : "interface.sparePartOutBound_test"
  }, {
    "name" : "suite",
    "value" : "test_createSparePartOutbound"
  }, {
    "name" : "subSuite",
    "value" : "TestCreateSparePartOutbound"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "91891-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.sparePartOutBound_test.test_createSparePartOutbound"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "variable",
    "value" : "{'input': {'operator': {'id': 1}, 'time': 1600337909049, 'shelf': 'shelf_vcl90', 'factory': 'factory_usnsl', 'reason': 'reason_2a2tr', 'thingRepair': {'id': 1}, 'thingMaintenance': {'id': 1}, 'details': [{'sparePart': {'id': 2}, 'number': 1, 'reason': 'reason_dmobm'}, {'sparePart': {'id': 3}, 'number': 1, 'reason': 'reason_blzdo'}, {'sparePart': {'id': 1}, 'number': 1, 'reason': 'reason_c42o6'}], 'addition': '[{\"key\": \"10f16f763c9548aea404526b525be2cb\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_hajng\"}, {\"key\": \"330ebe3898d44ca8b9b7426df15abc8a\", \"value\": \"\\\\u591a\\\\u884c\\\\u6587\\\\u5b57_b5g5b\"}, {\"key\": \"45e9f2c4fe8840eab2def98feba2f7eb\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f_2g52a\"}, {\"key\": \"79e8135f33c44eeb96b866fc59bb0424\", \"value\": 1600337909049}, {\"key\": \"edc51da931b8401b8b1534d21dc5a205\", \"value\": 1600337909049}, {\"key\": \"e8967b19cb69408badebfad61db4a52c\", \"value\": 1600337909049}, {\"key\": \"ef611263c33440e799a9a7e2b86ebe7a\", \"value\": \"\\\\u63cf\\\\u8ff0\\\\u6587\\\\u5b57_fdi8l\"}, {\"key\": \"cb89abd3e89547ebb97dcca4d6b6df0e\", \"value\": \"1\"}, {\"key\": \"56e0f0ca626b4ed59b13fe236d55d3ca\", \"value\": [\"5\", \"5\", \"3\"]}, {\"key\": \"8c6fc1de07ac43519f7f099cbfbd860f\", \"value\": 1.01}, {\"key\": \"3d9f4adf189149d2944414bba0579757\", \"value\": 1.01}, {\"key\": \"3d0f1762338d43e2a069f824a1741921\", \"value\": 1.01}, {\"key\": \"e23af2e33e4b4a8b855e33f305f88338\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f-\\\\u6d4b\\\\u8bd5\\\\u5fc5\\\\u586b\\\\u9879/\\\\u9ed8\\\\u8ba4\\\\u5185\\\\u5bb9_1pym7\"}, {\"key\": \"69e265a29d16482d994843b368489640\", \"value\": \"\\\\u6587\\\\u5b57-\\\\u9650\\\\u5b57\\\\u65702-100_g9052\"}]'}}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "838fc390b9baf49f.json",
  "parameterValues" : [ "{'input': {'operator': {'id': 1}, 'time': 1600337909049, 'shelf': 'shelf_vcl90', 'factory': 'factory_usnsl', 'reason': 'reason_2a2tr', 'thingRepair': {'id': 1}, 'thingMaintenance': {'id': 1}, 'details': [{'sparePart': {'id': 2}, 'number': 1, 'reason': 'reason_dmobm'}, {'sparePart': {'id': 3}, 'number': 1, 'reason': 'reason_blzdo'}, {'sparePart': {'id': 1}, 'number': 1, 'reason': 'reason_c42o6'}], 'addition': '[{\"key\": \"10f16f763c9548aea404526b525be2cb\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_hajng\"}, {\"key\": \"330ebe3898d44ca8b9b7426df15abc8a\", \"value\": \"\\\\u591a\\\\u884c\\\\u6587\\\\u5b57_b5g5b\"}, {\"key\": \"45e9f2c4fe8840eab2def98feba2f7eb\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f_2g52a\"}, {\"key\": \"79e8135f33c44eeb96b866fc59bb0424\", \"value\": 1600337909049}, {\"key\": \"edc51da931b8401b8b1534d21dc5a205\", \"value\": 1600337909049}, {\"key\": \"e8967b19cb69408badebfad61db4a52c\", \"value\": 1600337909049}, {\"key\": \"ef611263c33440e799a9a7e2b86ebe7a\", \"value\": \"\\\\u63cf\\\\u8ff0\\\\u6587\\\\u5b57_fdi8l\"}, {\"key\": \"cb89abd3e89547ebb97dcca4d6b6df0e\", \"value\": \"1\"}, {\"key\": \"56e0f0ca626b4ed59b13fe236d55d3ca\", \"value\": [\"5\", \"5\", \"3\"]}, {\"key\": \"8c6fc1de07ac43519f7f099cbfbd860f\", \"value\": 1.01}, {\"key\": \"3d9f4adf189149d2944414bba0579757\", \"value\": 1.01}, {\"key\": \"3d0f1762338d43e2a069f824a1741921\", \"value\": 1.01}, {\"key\": \"e23af2e33e4b4a8b855e33f305f88338\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f-\\\\u6d4b\\\\u8bd5\\\\u5fc5\\\\u586b\\\\u9879/\\\\u9ed8\\\\u8ba4\\\\u5185\\\\u5bb9_1pym7\"}, {\"key\": \"69e265a29d16482d994843b368489640\", \"value\": \"\\\\u6587\\\\u5b57-\\\\u9650\\\\u5b57\\\\u65702-100_g9052\"}]'}}" ]
}