{
  "uid" : "c4a3a99346a963bb",
  "name" : "test_8[re_submit]",
  "fullName" : "interface.workFlow_test.test_sparePartOutboundFlow.TestSparePartOutBoundWorkFlow#test_8",
  "historyId" : "e6459cef8978adacaa7c4f072cf8e5f8",
  "time" : {
    "start" : 1600228411794,
    "stop" : 1600228416995,
    "duration" : 5201
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <interface.workFlow_test.test_sparePartOutboundFlow.TestSparePartOutBoundWorkFlow object at 0x10bc180b8>\naction = 're_submit'\n\n    @pytest.mark.parametrize(\"action\", test_data)\n    @allure.story(\"完成不允许的操作\")\n    def test_8(self, action):\n        thing_repair_id = self.simple_user.create_spare_part_outbound()\n        # 审核通过\n>       self.simple_user.audit_pass(thing_repair_id)\n\ninterface/workFlow_test/test_sparePartOutboundFlow.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ninterface/workFlow_test/test_sparePartOutboundFlow.py:61: in audit_pass\n    self.assertJsonResponseEqual(\"$..status\", result, \"APPROVED\")\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interface.workFlow_test.test_sparePartOutboundFlow.ThingRepairUser object at 0x10b89e438>\nvalue = 'APPROVED', result = None\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1600227952116,
      "stop" : 1600227952218,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "resource",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <interface.workFlow_test.test_sparePartOutboundFlow.TestSparePartOutBoundWorkFlow object at 0x10bc180b8>\naction = 're_submit'\n\n    @pytest.mark.parametrize(\"action\", test_data)\n    @allure.story(\"完成不允许的操作\")\n    def test_8(self, action):\n        thing_repair_id = self.simple_user.create_spare_part_outbound()\n        # 审核通过\n>       self.simple_user.audit_pass(thing_repair_id)\n\ninterface/workFlow_test/test_sparePartOutboundFlow.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ninterface/workFlow_test/test_sparePartOutboundFlow.py:61: in audit_pass\n    self.assertJsonResponseEqual(\"$..status\", result, \"APPROVED\")\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interface.workFlow_test.test_sparePartOutboundFlow.ThingRepairUser object at 0x10b89e438>\nvalue = 'APPROVED', result = None\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "adb4cb68a1b31989",
      "name" : "log",
      "source" : "adb4cb68a1b31989.txt",
      "type" : "text/plain",
      "size" : 491523
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "完成不允许的操作"
  }, {
    "name" : "feature",
    "value" : "SparePartOutBoundWorkFlow"
  }, {
    "name" : "epic",
    "value" : "workflow"
  }, {
    "name" : "parentSuite",
    "value" : "interface.workFlow_test"
  }, {
    "name" : "suite",
    "value" : "test_sparePartOutboundFlow"
  }, {
    "name" : "subSuite",
    "value" : "TestSparePartOutBoundWorkFlow"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "99506-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.workFlow_test.test_sparePartOutboundFlow"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "action",
    "value" : "'re_submit'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c4a3a99346a963bb.json",
  "parameterValues" : [ "'re_submit'" ]
}