{
  "uid" : "b8f24b51aa23a862",
  "name" : "test_right[import_spare_parts0]",
  "fullName" : "interface.sparePart_test.test_importSpareParts.TestImportSpareParts#test_right",
  "historyId" : "885ed570311643a89e1216d3261586da",
  "time" : {
    "start" : 1600228023807,
    "stop" : 1600228023809,
    "duration" : 2
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_importSpareParts.TestImportSpareParts object at 0x109e6e7f0>\nimport_spare_parts = ({'data': None, 'errors': [{'locations': [{'column': 5, 'line': 2}], 'message': 'tuple index out of range', 'path': ['importSpareParts']}]}, ['备件导入-只填写必填项.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])\n\n    @allure.story(\"import spare_part success\")\n    @pytest.mark.parametrize(\"import_spare_parts\", test_right_data, indirect=True)\n    def test_right(self, import_spare_parts):\n        result, _ = import_spare_parts\n        logger.debug(result)\n>       self.assertCorrect(result)\n\ninterface/sparePart_test/test_importSpareParts.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_importSpareParts.TestImportSpareParts object at 0x109e6e7f0>\nvalue = None\nresult = [{'locations': [{'column': 5, 'line': 2}], 'message': 'tuple index out of range', 'path': ['importSpareParts']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "import_spare_parts",
    "time" : {
      "start" : 1600228023069,
      "stop" : 1600228023807,
      "duration" : 738
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1600227952116,
      "stop" : 1600227952218,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "resource",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_importSpareParts.TestImportSpareParts object at 0x109e6e7f0>\nimport_spare_parts = ({'data': None, 'errors': [{'locations': [{'column': 5, 'line': 2}], 'message': 'tuple index out of range', 'path': ['importSpareParts']}]}, ['备件导入-只填写必填项.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])\n\n    @allure.story(\"import spare_part success\")\n    @pytest.mark.parametrize(\"import_spare_parts\", test_right_data, indirect=True)\n    def test_right(self, import_spare_parts):\n        result, _ = import_spare_parts\n        logger.debug(result)\n>       self.assertCorrect(result)\n\ninterface/sparePart_test/test_importSpareParts.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_importSpareParts.TestImportSpareParts object at 0x109e6e7f0>\nvalue = None\nresult = [{'locations': [{'column': 5, 'line': 2}], 'message': 'tuple index out of range', 'path': ['importSpareParts']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dfb9516f03c71f4d",
      "name" : "log",
      "source" : "dfb9516f03c71f4d.txt",
      "type" : "text/plain",
      "size" : 34379
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "thing"
  }, {
    "name" : "feature",
    "value" : "importThings"
  }, {
    "name" : "story",
    "value" : "import spare_part success"
  }, {
    "name" : "parentSuite",
    "value" : "interface.sparePart_test"
  }, {
    "name" : "suite",
    "value" : "test_importSpareParts"
  }, {
    "name" : "subSuite",
    "value" : "TestImportSpareParts"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "99506-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.sparePart_test.test_importSpareParts"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "import_spare_parts",
    "value" : "['备件导入-只填写必填项.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b8f24b51aa23a862.json",
  "parameterValues" : [ "['备件导入-只填写必填项.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']" ]
}