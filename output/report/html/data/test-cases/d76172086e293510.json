{
  "uid" : "d76172086e293510",
  "name" : "test_2",
  "fullName" : "interface.workFlow_test.test_sparePartOutboundFlow.TestSparePartOutBoundWorkFlow#test_2",
  "historyId" : "f3bb96b23e5bb2e24a0ecad736608c73",
  "time" : {
    "start" : 1600248104846,
    "stop" : 1600248173446,
    "duration" : 68600
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <interface.workFlow_test.test_sparePartOutboundFlow.TestSparePartOutBoundWorkFlow object at 0x10cf609e8>\n\n    @allure.story(\"申领->待审核->审核拒绝->拒绝->重新编辑->审核通过->完成\")\n    def test_2(self):\n        spare_part_outbound_id = self.simple_user.create_spare_part_outbound()\n        # 第一次审核拒绝\n        self.simple_user.audit_reject(spare_part_outbound_id)\n        # 重新编辑提交\n>       self.simple_user.re_submit(spare_part_outbound_id)\n\ntest_sparePartOutboundFlow.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_sparePartOutboundFlow.py:93: in re_submit\n    self.assertJsonResponseEqual(\"$..status\", result, \"PENDING\")\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interface.workFlow_test.test_sparePartOutboundFlow.ThingRepairUser object at 0x10b3d85c0>\nvalue = 'PENDING', result = None\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <interface.workFlow_test.test_sparePartOutboundFlow.TestSparePartOutBoundWorkFlow object at 0x10cf609e8>\n\n    @allure.story(\"申领->待审核->审核拒绝->拒绝->重新编辑->审核通过->完成\")\n    def test_2(self):\n        spare_part_outbound_id = self.simple_user.create_spare_part_outbound()\n        # 第一次审核拒绝\n        self.simple_user.audit_reject(spare_part_outbound_id)\n        # 重新编辑提交\n>       self.simple_user.re_submit(spare_part_outbound_id)\n\ntest_sparePartOutboundFlow.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_sparePartOutboundFlow.py:93: in re_submit\n    self.assertJsonResponseEqual(\"$..status\", result, \"PENDING\")\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interface.workFlow_test.test_sparePartOutboundFlow.ThingRepairUser object at 0x10b3d85c0>\nvalue = 'PENDING', result = None\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3836ccd69a7dc42d",
      "name" : "log",
      "source" : "3836ccd69a7dc42d.txt",
      "type" : "text/plain",
      "size" : 12618
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "workflow"
  }, {
    "name" : "story",
    "value" : "申领->待审核->审核拒绝->拒绝->重新编辑->审核通过->完成"
  }, {
    "name" : "feature",
    "value" : "SparePartOutBoundWorkFlow"
  }, {
    "name" : "parentSuite",
    "value" : "interface.workFlow_test"
  }, {
    "name" : "suite",
    "value" : "test_sparePartOutboundFlow"
  }, {
    "name" : "subSuite",
    "value" : "TestSparePartOutBoundWorkFlow"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "77474-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.workFlow_test.test_sparePartOutboundFlow"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "807addac8cc2796e",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600228369769,
        "stop" : 1600228381469,
        "duration" : 11700
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "d76172086e293510.json",
  "parameterValues" : [ ]
}