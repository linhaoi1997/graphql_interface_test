{
  "uid" : "3daef5483d46040f",
  "name" : "test_query_thing",
  "fullName" : "interface.sparePartOutBound_test.test_querySparePartOutbound.TestQuerySparePartOutbound#test_query_thing",
  "historyId" : "e16b608a5d13466b5c652a155db58ba2",
  "time" : {
    "start" : 1600227974677,
    "stop" : 1600227976030,
    "duration" : 1353
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_querySparePartOutbound.TestQuerySparePartOutbound object at 0x10b9cae10>\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\ncreate_id = <function create_id.<locals>._create_id at 0x10ba4d488>\n\n    @allure.story(\"正确查询\")\n    def test_query_thing(self, resource, create_id):\n        _id, verify_variables = create_id(self.create_name, 1, self.resource_name, return_type=\"variable\")\n        user = resource.simple_user\n        variables = {\n            \"id\": _id\n        }\n        result = user.send_request(self.query_name, variables).result\n>       self.assertForm(verify_variables, result)\n\ninterface/sparePartOutBound_test/test_querySparePartOutbound.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:124: in assertForm\n    self.assertEveryParam(variables, result)\nsupport/base_test/AssertMethod.py:80: in assertEveryParam\n    self.assertJsonResponseEqual(i, result, deepest_dict[i])\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_querySparePartOutbound.TestQuerySparePartOutbound object at 0x10b9cae10>\nvalue = 1, result = None\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n>               assert None\nE               AssertionError\n\nsupport/base_test/AssertMethod.py:90: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1600227952116,
      "stop" : 1600227952218,
      "duration" : 102
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_id",
    "time" : {
      "start" : 1600227974677,
      "stop" : 1600227974677,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "resource",
    "time" : {
      "start" : 1600227952218,
      "stop" : 1600227952218,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_querySparePartOutbound.TestQuerySparePartOutbound object at 0x10b9cae10>\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\ncreate_id = <function create_id.<locals>._create_id at 0x10ba4d488>\n\n    @allure.story(\"正确查询\")\n    def test_query_thing(self, resource, create_id):\n        _id, verify_variables = create_id(self.create_name, 1, self.resource_name, return_type=\"variable\")\n        user = resource.simple_user\n        variables = {\n            \"id\": _id\n        }\n        result = user.send_request(self.query_name, variables).result\n>       self.assertForm(verify_variables, result)\n\ninterface/sparePartOutBound_test/test_querySparePartOutbound.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:124: in assertForm\n    self.assertEveryParam(variables, result)\nsupport/base_test/AssertMethod.py:80: in assertEveryParam\n    self.assertJsonResponseEqual(i, result, deepest_dict[i])\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_querySparePartOutbound.TestQuerySparePartOutbound object at 0x10b9cae10>\nvalue = 1, result = None\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n>               assert None\nE               AssertionError\n\nsupport/base_test/AssertMethod.py:90: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "506a87e1d2265991",
      "name" : "log",
      "source" : "506a87e1d2265991.txt",
      "type" : "text/plain",
      "size" : 40749
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "querySparePartOutbound"
  }, {
    "name" : "epic",
    "value" : "sparePartOutBound"
  }, {
    "name" : "story",
    "value" : "正确查询"
  }, {
    "name" : "parentSuite",
    "value" : "interface.sparePartOutBound_test"
  }, {
    "name" : "suite",
    "value" : "test_querySparePartOutbound"
  }, {
    "name" : "subSuite",
    "value" : "TestQuerySparePartOutbound"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "99506-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.sparePartOutBound_test.test_querySparePartOutbound"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3daef5483d46040f.json",
  "parameterValues" : [ ]
}