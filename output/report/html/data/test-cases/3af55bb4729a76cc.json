{
  "uid" : "3af55bb4729a76cc",
  "name" : "test_6[feed]",
  "fullName" : "interface.workFlow_test.test_thingInspectionFlow.TestThingInspectionWorkFlow#test_6",
  "historyId" : "d766ad89bd4dfcca792f4075c8f8b5b1",
  "time" : {
    "start" : 1600243856297,
    "stop" : 1600243863090,
    "duration" : 6793
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <interface.workFlow_test.test_thingInspectionFlow.TestThingInspectionWorkFlow object at 0x10b72fdd8>\naction = 'feed'\n\n    @pytest.mark.parametrize(\"action\", test_data)\n    @allure.story(\"审核中不允许的操作\")\n    def test_6(self, action):\n        thing_inspection_id = self.simple_user.create_thing_inspection()\n        # 反馈->审核中\n        self.simple_user.feed(thing_inspection_id)\n>       self.simple_user.audit_commit(thing_inspection_id)\n\ntest_thingInspectionFlow.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_thingInspectionFlow.py:57: in audit_commit\n    self.assertJsonResponseEqual(\"$..status\", result, \"UNDERREVIEW\")\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interface.workFlow_test.test_thingInspectionFlow.ThingInspectionUser object at 0x10b37bac8>\nvalue = 'UNDERREVIEW', result = 502\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "resource",
    "time" : {
      "start" : 1600243752992,
      "stop" : 1600243752992,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1600243752946,
      "stop" : 1600243752992,
      "duration" : 46
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "init",
    "time" : {
      "start" : 1600243752992,
      "stop" : 1600243752992,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <interface.workFlow_test.test_thingInspectionFlow.TestThingInspectionWorkFlow object at 0x10b72fdd8>\naction = 'feed'\n\n    @pytest.mark.parametrize(\"action\", test_data)\n    @allure.story(\"审核中不允许的操作\")\n    def test_6(self, action):\n        thing_inspection_id = self.simple_user.create_thing_inspection()\n        # 反馈->审核中\n        self.simple_user.feed(thing_inspection_id)\n>       self.simple_user.audit_commit(thing_inspection_id)\n\ntest_thingInspectionFlow.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_thingInspectionFlow.py:57: in audit_commit\n    self.assertJsonResponseEqual(\"$..status\", result, \"UNDERREVIEW\")\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <interface.workFlow_test.test_thingInspectionFlow.ThingInspectionUser object at 0x10b37bac8>\nvalue = 'UNDERREVIEW', result = 502\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3259356695ef23a",
      "name" : "log",
      "source" : "3259356695ef23a.txt",
      "type" : "text/plain",
      "size" : 11357
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "workflow"
  }, {
    "name" : "story",
    "value" : "审核中不允许的操作"
  }, {
    "name" : "feature",
    "value" : "ThingInspectionWorkFlow"
  }, {
    "name" : "parentSuite",
    "value" : "interface.workFlow_test"
  }, {
    "name" : "suite",
    "value" : "test_thingInspectionFlow"
  }, {
    "name" : "subSuite",
    "value" : "TestThingInspectionWorkFlow"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "5049-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "interface.workFlow_test.test_thingInspectionFlow"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "action",
    "value" : "'feed'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "68b3a0215b1d44ee",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600231384327,
        "stop" : 1600231388198,
        "duration" : 3871
      }
    }, {
      "uid" : "fe10c8acbf766db9",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600231219390,
        "stop" : 1600231221722,
        "duration" : 2332
      }
    }, {
      "uid" : "e8e7d3b6e34c80cd",
      "status" : "broken",
      "statusDetails" : "TypeError: 'bool' object is not subscriptable",
      "time" : {
        "start" : 1600228430231,
        "stop" : 1600228430344,
        "duration" : 113
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3af55bb4729a76cc.json",
  "parameterValues" : [ "'feed'" ]
}