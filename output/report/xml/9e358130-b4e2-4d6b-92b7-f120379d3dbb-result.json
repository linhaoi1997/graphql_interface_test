{"name": "test_2[variable0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_updateSparePartOutbound.TestUpdateSparePartOutbound object at 0x10ba94be0>\nvariable = {'input': {'factory': 'factory_gpa1f', 'id': '13', 'shelf': 'shelf_z3njz', 'time': 1600227948455}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\ncreate_id = <function create_id.<locals>._create_id at 0x10ba4dd90>\n\n    @allure.story(\"不填写选填项\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_no_optional_params\", **BaseTestCase.all_param))\n    def test_2(self, variable, resource, create_id):\n        # 创建一个id以修改\n        _id, _ = create_id(self.create_name, 1, self.resource_name, return_type=\"variable\")\n        variable['input'][\"id\"] = _id\n        # 使用创建的id\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ninterface/sparePartOutBound_test/test_updateSparePartOutbound.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_updateSparePartOutbound.TestUpdateSparePartOutbound object at 0x10ba94be0>\nvalue = None\nresult = [{'extensions': {'code': 'APOLLO_ERROR'}, 'locations': [{'column': 5, 'line': 2}], 'message': '当前备件申领单不支持此操作', 'path': ['updateSparePartOutbound']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError"}, "attachments": [{"name": "log", "source": "3ece49f4-d91f-4d6d-bce1-ca5ad9d10d2e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "variable", "value": "{'input': {'id': 3, 'time': 1600227948455, 'shelf': 'shelf_z3njz', 'factory': 'factory_gpa1f'}}"}], "start": 1600227982362, "stop": 1600227983184, "uuid": "b1d95223-4d2c-436e-9a03-07e7bcfbc2d0", "historyId": "14abdf7a5bc686c2a9bbf55af8a5d5f7", "testCaseId": "2c27d7239f7eeec0fdbca3cf91a57ea8", "fullName": "interface.sparePartOutBound_test.test_updateSparePartOutbound.TestUpdateSparePartOutbound#test_2", "labels": [{"name": "story", "value": "不填写选填项"}, {"name": "epic", "value": "sparePartOutBound"}, {"name": "feature", "value": "updateSparePartOutbound"}, {"name": "parentSuite", "value": "interface.sparePartOutBound_test"}, {"name": "suite", "value": "test_updateSparePartOutbound"}, {"name": "subSuite", "value": "TestUpdateSparePartOutbound"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "99506-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "interface.sparePartOutBound_test.test_updateSparePartOutbound"}]}