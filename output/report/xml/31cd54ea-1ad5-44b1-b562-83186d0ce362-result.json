{"name": "test_2[variable0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_updateThingRepair.TestUpdateThingRepair object at 0x10a8c2208>\nvariable = {'input': {'faultDesc': 'faultDesc_33pu1', 'id': '18', 'reportDepartment': 'reportDepartment_zfd9m'}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\ncreate_id = <function create_id.<locals>._create_id at 0x10ba4d510>\n\n    @allure.story(\"不填写选填项\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_no_optional_params\", **BaseTestCase.all_param))\n    def test_2(self, variable, resource, create_id):\n        # 创建一个id以修改\n        _id, _ = create_id(self.create_name, 1, \"ThingRepair\", return_type=\"variable\")\n        variable['input'][\"id\"] = _id\n        # 使用创建的id\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ninterface/thingRepair_test/test_updateThingRepair.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_updateThingRepair.TestUpdateThingRepair object at 0x10a8c2208>\nvalue = None\nresult = [{'extensions': {'code': 'APOLLO_ERROR'}, 'locations': [{'column': 5, 'line': 2}], 'message': '维修单已提交审核，无法修改基本信息', 'path': ['updateThingRepair']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError"}, "attachments": [{"name": "log", "source": "227b98fa-b39b-4f8b-96c9-ca07f7d90dd1-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "variable", "value": "{'input': {'id': 1, 'reportDepartment': 'reportDepartment_zfd9m', 'faultDesc': 'faultDesc_33pu1'}}"}], "start": 1600228329412, "stop": 1600228334070, "uuid": "01020849-9817-418f-abe1-fdc7a5316d01", "historyId": "516c8e370e7c42a6acf21526e1e4fa7f", "testCaseId": "27b7e32506f5f69616ad76bff88dfaa3", "fullName": "interface.thingRepair_test.test_updateThingRepair.TestUpdateThingRepair#test_2", "labels": [{"name": "story", "value": "不填写选填项"}, {"name": "feature", "value": "updateThingRepair"}, {"name": "epic", "value": "thingRepair"}, {"name": "parentSuite", "value": "interface.thingRepair_test"}, {"name": "suite", "value": "test_updateThingRepair"}, {"name": "subSuite", "value": "TestUpdateThingRepair"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "99506-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "interface.thingRepair_test.test_updateThingRepair"}]}