{"name": "test_right[import_spare_parts0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_importSpareParts.TestImportSpareParts object at 0x109e6e7f0>\nimport_spare_parts = ({'data': None, 'errors': [{'locations': [{'column': 5, 'line': 2}], 'message': 'tuple index out of range', 'path': ['importSpareParts']}]}, ['备件导入-只填写必填项.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])\n\n    @allure.story(\"import spare_part success\")\n    @pytest.mark.parametrize(\"import_spare_parts\", test_right_data, indirect=True)\n    def test_right(self, import_spare_parts):\n        result, _ = import_spare_parts\n        logger.debug(result)\n>       self.assertCorrect(result)\n\ninterface/sparePart_test/test_importSpareParts.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_importSpareParts.TestImportSpareParts object at 0x109e6e7f0>\nvalue = None\nresult = [{'locations': [{'column': 5, 'line': 2}], 'message': 'tuple index out of range', 'path': ['importSpareParts']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError"}, "attachments": [{"name": "log", "source": "2933980b-0f47-40df-93cf-25526c40767c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "import_spare_parts", "value": "['备件导入-只填写必填项.xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']"}], "start": 1600228023807, "stop": 1600228023809, "uuid": "ac0a7d25-06af-4abd-a38f-b6d86378f392", "historyId": "885ed570311643a89e1216d3261586da", "testCaseId": "0c772caae39dfc525e51cd674dfc11f3", "fullName": "interface.sparePart_test.test_importSpareParts.TestImportSpareParts#test_right", "labels": [{"name": "epic", "value": "thing"}, {"name": "feature", "value": "importThings"}, {"name": "story", "value": "import spare_part success"}, {"name": "parentSuite", "value": "interface.sparePart_test"}, {"name": "suite", "value": "test_importSpareParts"}, {"name": "subSuite", "value": "TestImportSpareParts"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "99506-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "interface.sparePart_test.test_importSpareParts"}]}