{"name": "test_2[variable0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_createThingInspection.TestCreateThingInspection object at 0x10c97ee10>\nvariable = {'input': {'operator': {'id': 1}, 'period': {'startAt': 1600227948628, 'type': 'LIMITED'}, 'rule': {'id': 1}, 'things': [{'id': 2}, {'id': 3}, {'id': 1}]}}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109eb1c18>\n\n    @allure.story(\"不填写选填项\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_no_optional_params\", **BaseTestCase.all_param))\n    def test_2(self, variable, resource):\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ninterface/thingInspection_test/test_createThingInspection.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsupport/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\nsupport/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\nsupport/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_createThingInspection.TestCreateThingInspection object at 0x10c97ee10>\nvalue = None\nresult = [{'extensions': {'code': 'USER_INPUT_ERROR'}, 'locations': [{'column': 5, 'line': 2}], 'message': '有限周期需要有结束时间', 'path': ['createThingInspection']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\nsupport/base_test/AssertMethod.py:94: AssertionError"}, "attachments": [{"name": "log", "source": "1e26cc79-6504-4edd-ab4d-45274c38c714-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "variable", "value": "{'input': {'rule': {'id': 1}, 'operator': {'id': 1}, 'period': {'type': 'LIMITED', 'startAt': 1600227948628}, 'things': [{'id': 2}, {'id': 3}, {'id': 1}]}}"}], "start": 1600228069222, "stop": 1600228069474, "uuid": "47ef5e1a-3409-4825-b399-dc7bd733a053", "historyId": "f0255236d5fc22e1a28f09b5f6e95818", "testCaseId": "687bdb689b4796e3595a3a452eb28843", "fullName": "interface.thingInspection_test.test_createThingInspection.TestCreateThingInspection#test_2", "labels": [{"name": "story", "value": "不填写选填项"}, {"name": "feature", "value": "createThingInspection"}, {"name": "epic", "value": "thingInspection"}, {"name": "parentSuite", "value": "interface.thingInspection_test"}, {"name": "suite", "value": "test_createThingInspection"}, {"name": "subSuite", "value": "TestCreateThingInspection"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "99506-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "interface.thingInspection_test.test_createThingInspection"}]}