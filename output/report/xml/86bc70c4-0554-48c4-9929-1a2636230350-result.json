{"name": "test_1[variable0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_createSparePartOutbound.TestCreateSparePartOutbound object at 0x10abfe128>\nvariable = {'input': {'addition': '[{\"key\": \"10f16f763c9548aea404526b525be2cb\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_eqk4k\"}, {...reason': 'LOOSEN', 'sparePart': {'id': 1}}], 'factory': 'factory_1cwce', 'operator': {'id': 1}, ...}, 'reason': '设备维修'}\nresource = <support.base_test.ResourceLoader.ResourceLoader object at 0x109b68438>\n\n    @allure.story(\"所有项完整\")\n    @pytest.mark.parametrize(\"variable\", interface.generate(\"generate_all_params\", **BaseTestCase.all_param))\n    def test_1(self, variable, resource):\n        # 有bug先改下参数\n        for i in variable[\"input\"][\"details\"]:\n            i[\"reason\"] = \"LOOSEN\"\n        variable[\"reason\"] = \"设备维修\"\n        variable[\"input\"].pop(\"thingMaintenance\")\n        user = resource.simple_user\n        result = user.send_request(self.query_name, variable).result\n>       self.assertForm(variable, result)\n\ntest_createSparePartOutbound.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../support/base_test/AssertMethod.py:123: in assertForm\n    self.assertCorrect(result)\n../../support/base_test/AssertMethod.py:128: in assertCorrect\n    self.assertJsonResponseEqual(\"$..errors\", result, None)\n../../support/base_test/AssertMethod.py:23: in assertJsonResponseEqual\n    self.assertEqual(value, result)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_createSparePartOutbound.TestCreateSparePartOutbound object at 0x10abfe128>\nvalue = None\nresult = [{'locations': [{'column': 5, 'line': 2}], 'message': \"1 validation error for CreateSparePartOutboundInput\\nreason\\n  ...MENT_REPAIR: '设备维修'>, <SparePartOutboundReason.EQUIPMENT_MAINTENANCE: '设备保养'>])\", 'path': ['createSparePartOutbound']}]\n\n    def assertEqual(self, value, result):\n        if type(value) == str and value.isdigit():\n            if type(result) in (str, int):\n                assert int(value) == int(result)\n        elif type(value) in (int, float):\n            if type(result) in (str, int, float):\n                assert int(value) == int(result)\n            else:\n                assert None\n        elif type(value) == list:\n            assert format_number(value) == format_number(result)\n        else:\n>           assert value == result\nE           AssertionError\n\n../../support/base_test/AssertMethod.py:94: AssertionError"}, "attachments": [{"name": "log", "source": "16df75a2-0c22-469f-a3a1-9261b8de8526-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "variable", "value": "{'input': {'operator': {'id': 1}, 'time': 1600338003341, 'shelf': 'shelf_nppac', 'factory': 'factory_1cwce', 'reason': 'reason_vytx6', 'thingRepair': {'id': 1}, 'thingMaintenance': {'id': 1}, 'details': [{'sparePart': {'id': 2}, 'number': 1, 'reason': 'reason_m1qqc'}, {'sparePart': {'id': 3}, 'number': 1, 'reason': 'reason_yqcfa'}, {'sparePart': {'id': 1}, 'number': 1, 'reason': 'reason_rkr7d'}], 'addition': '[{\"key\": \"10f16f763c9548aea404526b525be2cb\", \"value\": \"\\\\u5355\\\\u884c\\\\u6587\\\\u5b57_eqk4k\"}, {\"key\": \"330ebe3898d44ca8b9b7426df15abc8a\", \"value\": \"\\\\u591a\\\\u884c\\\\u6587\\\\u5b57_deg8v\"}, {\"key\": \"45e9f2c4fe8840eab2def98feba2f7eb\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f_wx6o2\"}, {\"key\": \"79e8135f33c44eeb96b866fc59bb0424\", \"value\": 1600338003342}, {\"key\": \"edc51da931b8401b8b1534d21dc5a205\", \"value\": 1600338003342}, {\"key\": \"e8967b19cb69408badebfad61db4a52c\", \"value\": 1600338003342}, {\"key\": \"ef611263c33440e799a9a7e2b86ebe7a\", \"value\": \"\\\\u63cf\\\\u8ff0\\\\u6587\\\\u5b57_r28gj\"}, {\"key\": \"cb89abd3e89547ebb97dcca4d6b6df0e\", \"value\": \"1\"}, {\"key\": \"56e0f0ca626b4ed59b13fe236d55d3ca\", \"value\": [\"5\", \"2\", \"3\"]}, {\"key\": \"8c6fc1de07ac43519f7f099cbfbd860f\", \"value\": 1.01}, {\"key\": \"3d9f4adf189149d2944414bba0579757\", \"value\": 1.01}, {\"key\": \"3d0f1762338d43e2a069f824a1741921\", \"value\": 1.01}, {\"key\": \"e23af2e33e4b4a8b855e33f305f88338\", \"value\": \"\\\\u8054\\\\u7cfb\\\\u65b9\\\\u5f0f-\\\\u6d4b\\\\u8bd5\\\\u5fc5\\\\u586b\\\\u9879/\\\\u9ed8\\\\u8ba4\\\\u5185\\\\u5bb9_img6g\"}, {\"key\": \"69e265a29d16482d994843b368489640\", \"value\": \"\\\\u6587\\\\u5b57-\\\\u9650\\\\u5b57\\\\u65702-100_htiox\"}]'}}"}], "start": 1600338003408, "stop": 1600338003590, "uuid": "5a824d13-5151-43fe-9655-52b78152819e", "historyId": "018e8ffed1b9b57d917e4fd82d2c8947", "testCaseId": "5e055082da4e84035a424a8169c5f44d", "fullName": "interface.sparePartOutBound_test.test_createSparePartOutbound.TestCreateSparePartOutbound#test_1", "labels": [{"name": "epic", "value": "sparePartOutBound"}, {"name": "story", "value": "所有项完整"}, {"name": "feature", "value": "createSparePartOutbound"}, {"name": "parentSuite", "value": "interface.sparePartOutBound_test"}, {"name": "suite", "value": "test_createSparePartOutbound"}, {"name": "subSuite", "value": "TestCreateSparePartOutbound"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "91999-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "interface.sparePartOutBound_test.test_createSparePartOutbound"}]}